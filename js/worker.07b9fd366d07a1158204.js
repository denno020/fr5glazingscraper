!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=14)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.id="",this.isCsog=!1;var n=new RegExp(e.Regex),i=n.exec(t);this.id=i[1].trim(),this.isCsog=e.TestCsog(t)}return i(e,[{key:"getId",value:function(){return this.id}},{key:"getIsCsog",value:function(){return this.isCsog}},{key:"toObject",value:function(){return{id:this.getConstructionId(),isCsog:this.getIsCsog()}}}],[{key:"TestCsog",value:function(t){return new RegExp(e.CSOGRegex).test(t)}},{key:"Build",value:function(t){return new e(t)}}]),e}();o.ConstructionIdRegex="(24[1-9]|2[5-9]\\d|3[1-3]\\d|340)",o.Regex="^ 2"+o.ConstructionIdRegex,o.CSOGRegex="^ 2(24[1-9]|2[5-9]\\d|3[1-3]\\d|340)   (.{7})*( 18 100)",t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.zoneId="",this.windowId="",this.height="",this.width="",this.azimuth="",this.headHeight="",this.horizShading1Id="",this.horizShading2Id="";var n=new RegExp(e.Regex),i=n.exec(t);this.zoneId=i[e.CONST__ZONE_ID].trim(),this.windowId=i[e.CONST__WINDOW_ID].trim(),this.height=i[e.CONST__HEIGHT].trim(),this.width=i[e.CONST__WIDTH].trim(),this.azimuth=i[e.CONST__AZIMUTH].trim(),this.horizShading1Id=i[e.CONST__HORZ_SHADING_1].trim(),this.horizShading2Id=i[e.CONST__HORZ_SHADING_2].trim()}return i(e,[{key:"getZoneId",value:function(){return this.zoneId}},{key:"getWindowId",value:function(){return this.windowId}},{key:"getHeight",value:function(){return this.height}},{key:"getWidth",value:function(){return this.width}},{key:"getAzimuth",value:function(){return this.azimuth}},{key:"getHeadHeight",value:function(){return this.headHeight}},{key:"getHorizShading1Id",value:function(){return this.horizShading1Id}},{key:"getHorizShading2Id",value:function(){return this.horizShading2Id}},{key:"toObject",value:function(){return{zoneId:this.getZoneId(),windowId:this.getWindowId(),height:this.getHeight(),width:this.getWidth(),azimuth:this.getAzimuth(),headHeight:this.getHeadHeight(),horizShading1Id:this.getHorizShading1Id(),horizShading2Id:this.getHorizShading2Id()}}}],[{key:"Build",value:function(t){return new e(t)}},{key:"HeadHeight",value:function(e,t){return((""===e?0:parseFloat(e))+(""===t?0:parseFloat(t))).toFixed(2).toString()}}]),e}();o.CONST__ZONE_ID=1,o.CONST__WINDOW_ID=2,o.CONST__HEIGHT=6,o.CONST__WIDTH=7,o.CONST__AZIMUTH=8,o.CONST__HORZ_SHADING_1=9,o.CONST__HORZ_SHADING_2=10,o.Regex="^ 3(.{3})(( (10)|(  [0-9])))(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})",t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.zoneId="",this.height="";var n=new RegExp(e.Regex),i=n.exec(t);this.zoneId=i[1].trim(),this.height=i[3].trim()}return i(e,[{key:"getZoneId",value:function(){return this.zoneId}},{key:"getHeight",value:function(){return this.height}},{key:"toObject",value:function(){return{zoneId:this.getZoneId(),height:this.getHeight()}}}],[{key:"Build",value:function(t){return new e(t)}}]),e}();o.Regex="^ 3(.{3})700(.{6})(.{6})(.{6})(.{6})",t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.id="",this.eaveProjection="",this.eaveOffset="",this.pergolaProjection="",this.pergolaOffset="",this.projection="";var n=new RegExp(e.Regex),i=n.exec(t);this.id=i[e.CONST__ID].trim(),this.eaveProjection=i[e.CONST__EAVE_PROJECTION].trim(),this.eaveOffset=i[e.CONST__EAVE_OFFSET].trim(),this.pergolaProjection=i[e.CONST__PERGOLA_PROJECTION].trim(),this.pergolaOffset=i[e.CONST__PERGOLA_OFFSET].trim(),this.projection=this.getProjection()}return i(e,[{key:"getProjection",value:function(){var t=parseFloat(this.getEaveProjection())>parseFloat(this.getPergolaProjection())?this.getEaveProjection():this.getPergolaProjection();return e.RoundValue(t)}},{key:"getId",value:function(){return this.id}},{key:"getEaveOffset",value:function(){return this.eaveOffset}},{key:"getEaveProjection",value:function(){return this.eaveProjection}},{key:"getPergolaOffset",value:function(){return this.pergolaOffset}},{key:"getPergolaProjection",value:function(){return this.pergolaProjection}},{key:"toObject",value:function(){return{id:this.getId(),projection:this.getProjection(),offset:{eave:this.getEaveOffset(),pergola:this.getPergolaOffset()}}}}],[{key:"Build",value:function(t){return new e(t)}},{key:"RoundValue",value:function(e){return(Math.round(20*e)/20).toFixed(2)}}]),e}();o.CONST__ID=1,o.CONST__EAVE_PROJECTION=2,o.CONST__EAVE_OFFSET=3,o.CONST__PERGOLA_PROJECTION=6,o.CONST__PERGOLA_OFFSET=7,o.Regex="^ 1 20(.{3})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})(.{6})$",t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.id="",this.name="";var n=new RegExp(e.Regex),i=n.exec(t);this.id=i[1].trim(),this.name=i[2].trim()}return i(e,[{key:"toObject",value:function(){return{id:this.id,name:this.name}}}],[{key:"Build",value:function(t){return new e(t)}}]),e}();o.CONST__ID=3,o.CONST__NAME="",o.Regex="^ \\d(.{3})[ \\d]*([a-zA-Z][a-zA-Z\\-\\d]{9}[ a-zA-Z][a-zA-Z]?)",t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.id="",this.name="";var n=new RegExp(e.Regex),i=n.exec(t);this.id=i[1].trim(),this.name=i[2].trim()}return i(e,[{key:"getId",value:function(){return this.id}},{key:"getName",value:function(){return this.name}},{key:"toObject",value:function(){return{id:this.getId(),name:this.getName()}}}],[{key:"Build",value:function(t){return new e(t)}}]),e}();o.Regex="^C Z00?(\\d{1,3}) => (.*)$",t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),u=function(e){return e&&e.__esModule?e:{default:e}}(o),a=function(){function e(t){r(this,e),this.zoneId="",this.constructionId="";var n=new RegExp(e.Regex),i=n.exec(t);this.zoneId=i[1].trim(),this.constructionId=i[2].trim()}return i(e,[{key:"getZoneId",value:function(){return this.zoneId}},{key:"getConstructionId",value:function(){return this.constructionId}},{key:"toObject",value:function(){return{zoneId:this.getZoneId(),constructionId:this.getConstructionId()}}}],[{key:"Build",value:function(t){return new e(t)}}]),e}();a.Regex=" 3(...)("+u.default.ConstructionIdRegex+")",t.default=a},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(3),a=r(u),l=n(4),f=r(l),s=n(1),c=r(s),d=n(2),h=r(d),g=n(5),v=r(g),p=n(0),_=r(p),y=n(6),w=r(y),O=function(){function e(){i(this,e)}return o(e,null,[{key:"ShadingScheme",value:function(t){return e.Test(t,a.default.Regex)}},{key:"WindowConstruction",value:function(t){return e.Test(t,f.default.Regex)}},{key:"ZoneWindow",value:function(t){return e.Test(t,c.default.Regex)}},{key:"CeilingHeight",value:function(t){return e.Test(t,h.default.Regex)}},{key:"ZoneDetail",value:function(t){return e.Test(t,v.default.Regex)}},{key:"FloorConstruction",value:function(t){return e.Test(t,_.default.Regex)}},{key:"ZoneFloor",value:function(t){return e.Test(t,w.default.Regex)}},{key:"Test",value:function(e,t){return new RegExp(t).test(e)}},{key:"ReverseLookup",value:function(t){return e.ShadingScheme(t)?"HorizontalShadingScheme":e.CeilingHeight(t)?"CeilingHeight":e.WindowConstruction(t)?"WindowConstruction":e.ZoneWindow(t)?"ZoneWindow":e.ZoneDetail(t)?"ZoneDetail":e.FloorConstruction(t)?"FloorConstruction":!!e.ZoneFloor(t)&&"ZoneFloor"}}]),e}();t.default=O},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(12),a=r(u),l=n(7),f=r(l),s=n(4),c=r(s),d=n(1),h=r(d),g=n(3),v=r(g),p=n(2),_=r(p),y=n(5),w=r(y),O=n(0),C=r(O),m=n(6),I=r(m),b=function(){function e(t){i(this,e),this.windowConstructions=[],this.zoneWindows=[],this.zoneDetails=[],this.shadingSchemes=[],this.ceilingHeights=[],this.file=t}return o(e,[{key:"process",value:function(){var e=this.getDataLines();this.windowConstructions=e.filter(function(e){return"WindowConstruction"===f.default.ReverseLookup(e)}).map(function(e){return c.default.Build(e)}),this.zoneWindows=e.filter(function(e){return"ZoneWindow"===f.default.ReverseLookup(e)}).map(function(e){return h.default.Build(e)}),this.shadingSchemes=e.filter(function(e){return"HorizontalShadingScheme"===f.default.ReverseLookup(e)}).map(function(e){return v.default.Build(e)}),this.ceilingHeights=e.filter(function(e){return"CeilingHeight"===f.default.ReverseLookup(e)}).map(function(e){return _.default.Build(e)}),this.zoneDetails=e.filter(function(e){return"ZoneDetail"===f.default.ReverseLookup(e)}).map(function(e){return w.default.Build(e)}),this.floorConstructions=e.filter(function(e){return"FloorConstruction"===f.default.ReverseLookup(e)}).map(function(e){return C.default.Build(e)}),this.zoneFloors=e.filter(function(e){return"ZoneFloor"===f.default.ReverseLookup(e)}).map(function(e){return I.default.Build(e)})}},{key:"getDataLines",value:function(){return this.file.filter(function(e){return!1!==a.default.Build(e)})}},{key:"getWindowConstructions",value:function(){return this.windowConstructions}},{key:"getZoneWindows",value:function(){return this.zoneWindows}},{key:"getShading",value:function(){return this.shadingSchemes}},{key:"getCeilingHeights",value:function(){return this.ceilingHeights}},{key:"getZoneDetails",value:function(){return this.zoneDetails}},{key:"getFloorConstructions",value:function(){return this.floorConstructions}},{key:"getZoneFloors",value:function(){return this.zoneFloors}},{key:"getAllData",value:function(){return{windowConstructions:this.getWindowConstructions(),zoneWindows:this.getZoneWindows(),shading:this.getShading(),ceilingHeights:this.getCeilingHeights(),zoneDetails:this.getZoneDetails(),floorConstructions:this.getFloorConstructions(),zoneFloors:this.getZoneFloors()}}}]),e}();t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(11),l=r(a),f=n(10),s=r(f),c=n(1),d=r(c),h=n(13),g=function(){function e(){i(this,e)}return u(e,null,[{key:"Compile",value:function(e){var t=e.windowConstructions,n=e.zoneWindows,r=e.shading,i=e.ceilingHeights,u=e.zoneDetails,a=e.floorConstructions,l=e.zoneFloors;return u.map(function(e){var u=n.filter(function(t){return t.zoneId===e.id}).map(function(n){var u=t.filter(function(e){return e.id===n.getWindowId()})[0],a=r.filter(function(e){return e.getId()===n.getHorizShading1Id()||e.getId()===n.getHorizShading2Id()}),l=i.filter(function(t){return t.getZoneId()===e.getId()})[0];return o({},n,{construction:u,shading:a,ceilingHeight:l})}),f=l.filter(function(t){return t.zoneId===e.id}).map(function(e){var t=a.filter(function(t){return t.id===e.constructionId})[0];return o({},e,t)});return{id:e.getId(),name:e.getName(),windows:u,onGroundFloor:s.default.Test(f)}})}},{key:"Build",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=e.map(function(e){var n=e.windows.map(function(n){var r="",i="",o="";return n.shading.length>0&&(r=n.shading[0].projection,i=n.shading[0].eaveOffset,o=n.shading[0].pergolaOffset),[e.name,"",l.default.Get(n.azimuth,t),n.height,n.width,r,d.default.HeadHeight(n.height,i),n.construction.name,n.ceilingHeight.height,i,o,e.onGroundFloor?"0":""]});return n.length>0?n:[n]});return(0,h.flatten)(n)}}]),e}();t.default=g},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(){r(this,e)}return i(e,null,[{key:"Test",value:function(e){return e.filter(function(e){return e.isCsog}).length>0}}]),e}();t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(){r(this,e)}return i(e,null,[{key:"Get",value:function(t,n){var r=parseInt(t,10);return e.Is(r,n,e.CONST__N_E)?"NE":e.Is(r,n,e.CONST__E)?"E":e.Is(r,n,e.CONST__S_E)?"SE":e.Is(r,n,e.CONST__S)?"S":e.Is(r,n,e.CONST__S_W)?"SW":e.Is(r,n,e.CONST__W)?"W":e.Is(r,n,e.CONST__N_W)?"NW":"N"}},{key:"Is",value:function(t,n,r){var i={upper:e.Normalize(parseInt(n,10)+r.upper),lower:e.Normalize(parseInt(n,10)+r.lower)};return t>=i.lower&&t<=i.upper}},{key:"Normalize",value:function(e){return e<0?360-Math.abs(e):e>360?e-360:e}}]),e}();o.CONST__N={lower:22,upper:338},o.CONST__N_E={lower:23,upper:67},o.CONST__E={lower:68,upper:112},o.CONST__S_E={lower:113,upper:157},o.CONST__S={lower:158,upper:202},o.CONST__S_W={lower:203,upper:247},o.CONST__W={lower:248,upper:292},o.CONST__N_W={lower:293,upper:337},t.default=o},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(2),a=r(u),l=n(3),f=r(l),s=n(7),c=r(s),d=n(4),h=r(d),g=n(1),v=r(g),p=n(5),_=r(p),y=n(0),w=r(y),O=n(6),C=r(O),m=function(){function e(){i(this,e)}return o(e,null,[{key:"Build",value:function(e){return c.default.ShadingScheme(e)?f.default.Build(e):c.default.CeilingHeight(e)?a.default.Build(e):c.default.WindowConstruction(e)?h.default.Build(e):c.default.ZoneWindow(e)?v.default.Build(e):c.default.ZoneDetail(e)?_.default.Build(e):c.default.FloorConstruction(e)?w.default.Build(e):!!c.default.ZoneFloor(e)&&C.default.Build(e)}}]),e}();t.default=m},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});t.flatten=function(e){var t;return(t=Array.prototype).concat.apply(t,r(e))}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var o=n(8),u=r(o),a=n(9),l=r(a);onmessage=function(e){var t=e.data,n=new FileReader;n.onload=function(e){var n=e.target.result.split("\r\n"),r=new u.default(n);r.process();var o=l.default.Compile(r.getAllData()),a=o.filter(function(e){return e.onGroundFloor}),f=o.filter(function(e){return!e.onGroundFloor}),s=[].concat(i(a),i(f)),c=l.default.Build(s,t.reference);postMessage({results:c})},n.abort(),n.readAsText(t.file)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,